<?xml version="1.0" encoding="UTF-8"?>    
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jee="http://www.springframework.org/schema/jee"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="    
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee 
        http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">    
        
        <!-- 自动扫描 -->
       	<context:component-scan base-package="com.iwangbo.service" />
        
        <!-- 引入外部数据源配置信息 -->
     	<context:property-placeholder location="classpath:/jdbc.properties" />
        
        <!-- 配置数据源 -->
    	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">  
	        <!-- 数据库连接信息 -->		
    		<property name="driverClassName" value="${driverClass}"></property>
         	<property name="url" value="${jdbcUrl}"></property>
         	<property name="username" value="${user}"></property>
         	<property name="password" value="${password}"></property>
    	</bean>  
    	
    
    	<!-- 配置SqlSessionFactory -->
    	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	        <property name="dataSource" ref="dataSource"></property>  
	        <!-- 加载mybatis的全局配置文件 -->
	        <property name="configLocation" value="classpath:mybatis-config.xml" />   
    	</bean>
    	  
    	<!-- 自动扫描mapper接口所在的包 -->
    	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
	        <property name="basePackage" value="com.iwangbo.mapper"></property>  
	        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    	</bean> 
    	
    	 
       	<!-- 配置事务管理 -->
    	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
        
        <!-- 配置声明式事务管理（采用注解的方式） -->
    	<tx:annotation-driven transaction-manager="txManager"/> 
    	
    	<!-- 自定义Realm -->
    	<bean id="myRealm" class="com.iwangbo.realm.MyRealm" />
    	
    	<!-- 安全管理器 -->
    	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    		<property name="realm" ref="myRealm" />
    	</bean>
    	
    	<!-- Shiro过滤器 -->
    	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    		<!-- Shiro的核心安全接口，这个属性是必须的 -->
    		<property name="securityManager" ref="securityManager" />
    		<!-- 身份认证失败，则跳转到登录页面的配置 -->
    		<property name="loginUrl" value="/login.jsp" />
    		<!-- Shiro连接约束配置，即过滤链的定义 -->
    		<property name="filterChainDefinitions">
    			<value>
    				/login=anon
					/admin*/**=authc
    			</value>
    		</property>
    	</bean>
    	
    	<!-- 保证实现了shiro内部lifecycle函数的bean执行 -->
    	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
        
        <!-- 开启Shiro注解 -->
		<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
  		<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
  	  		<property name="securityManager" ref="securityManager"/>  
    	</bean>
    	
    	  
        
</beans>
